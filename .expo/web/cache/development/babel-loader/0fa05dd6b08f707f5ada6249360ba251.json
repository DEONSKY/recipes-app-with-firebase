{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MERTCAN\\\\Desktop\\\\receipes-app\\\\recipes-app-react-native-master\\\\src\\\\screens\\\\Login\\\\Login.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Firebase from \"../../../firebaseConfig\";\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nexport default function Login() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var Login = function Login() {\n    Firebase.auth().signInWithEmailAndPassword(email, password).then(function (result) {\n      registerForPushNotificationsAsync().then(function (res) {\n        sendNotificationToAllUsers();\n      });\n      console.log(result);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"email\",\n    onChangeText: function onChangeText(email) {\n      return setEmail(email);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"password\",\n    secureTextEntry: true,\n    onChangeText: function onChangeText(password) {\n      return setPassword(password);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return Login();\n    },\n    title: \"Sign Up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 8\n    }\n  }));\n\n  function sendNotificationToAllUsers() {\n    var users;\n    return _regeneratorRuntime.async(function sendNotificationToAllUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Firebase.firestore().collection(\"users\").get());\n\n          case 2:\n            users = _context.sent;\n            users.docs.map(function (user) {\n              return sendPushNotification(user.data().token);\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function sendPushNotification(expoPushToken) {\n    var message;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            message = {\n              to: expoPushToken,\n              sound: 'default',\n              title: 'Application Opened',\n              body: 'Application Started Succesfuly',\n              data: {\n                someData: 'goes here'\n              }\n            };\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Accept-encoding': 'gzip, deflate',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(message)\n            }));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function registerForPushNotificationsAsync() {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status, res;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context3.next = 21;\n              break;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context3.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context3.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context3.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context3.abrupt(\"return\");\n\n          case 15:\n            _context3.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context3.sent.data;\n            console.log(token);\n            _context3.next = 22;\n            break;\n\n          case 21:\n            alert('Must use physical device for Push Notifications');\n\n          case 22:\n            if (!token) {\n              _context3.next = 27;\n              break;\n            }\n\n            _context3.next = 25;\n            return _regeneratorRuntime.awrap(Firebase.firestore().collection('users').doc(Firebase.auth().currentUser.uid).set({\n              token: token\n            }, {\n              merge: true\n            }));\n\n          case 25:\n            res = _context3.sent;\n            console.log(res + \"123\");\n\n          case 27:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            return _context3.abrupt(\"return\", token);\n\n          case 29:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n}","map":{"version":3,"sources":["C:/Users/MERTCAN/Desktop/receipes-app/recipes-app-react-native-master/src/screens/Login/Login.js"],"names":["React","useState","Firebase","Notifications","Constants","Login","email","setEmail","password","setPassword","auth","signInWithEmailAndPassword","then","result","registerForPushNotificationsAsync","res","sendNotificationToAllUsers","console","log","catch","error","firestore","collection","get","users","docs","map","user","sendPushNotification","data","token","expoPushToken","message","to","sound","title","body","someData","fetch","method","headers","Accept","JSON","stringify","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","doc","currentUser","uid","set","merge","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, {useState } from 'react'\r\nimport {View,Button,TextInput} from 'react-native'\r\nimport Firebase from '../../../firebaseConfig';\r\nimport * as Notifications from 'expo-notifications'\r\nimport Constants from 'expo-constants'\r\n\r\nexport default function Login() {\r\n\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n\r\n  const Login = () => {\r\n    Firebase.auth().signInWithEmailAndPassword(email,password)\r\n    .then((result)=>{\r\n      registerForPushNotificationsAsync().then(\r\n        res=>{sendNotificationToAllUsers()}\r\n      )\r\n      console.log(result)\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error)\r\n    })\r\n  }\r\n  return (\r\n    <View>\r\n      <TextInput\r\n        placeholder= \"email\"\r\n        onChangeText={email=>setEmail(email)}\r\n       />\r\n      <TextInput\r\n        placeholder= \"password\"\r\n        secureTextEntry={true}\r\n        onChangeText={password=>setPassword(password)}\r\n       />\r\n       <Button\r\n        onPress={()=>Login()}\r\n        title=\"Sign Up\"/>\r\n    </View>\r\n  )\r\n\r\n  async function sendNotificationToAllUsers () {\r\n\r\n    const users = await Firebase.firestore().collection(\"users\").get();\r\n    users.docs.map(user => sendPushNotification(user.data().token))\r\n  }\r\n\r\n  async function sendPushNotification(expoPushToken) {\r\n    const message = {\r\n      to: expoPushToken,\r\n      sound: 'default',\r\n      title: 'Application Opened',\r\n      body: 'Application Started Succesfuly',\r\n      data: { someData: 'goes here' },\r\n    };\r\n  \r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Accept-encoding': 'gzip, deflate',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(message),\r\n    });\r\n  }\r\n\r\n  async function registerForPushNotificationsAsync() {\r\n    let token;\r\n    if (Constants.isDevice) {\r\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n      let finalStatus = existingStatus;\r\n      if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        finalStatus = status;\r\n      }\r\n      if (finalStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n      token = (await Notifications.getExpoPushTokenAsync()).data;\r\n      console.log(token);\r\n    } else {\r\n      alert('Must use physical device for Push Notifications');\r\n    }\r\n  \r\n    if(token){\r\n      const res = await Firebase\r\n      .firestore()\r\n      .collection('users')\r\n      .doc(Firebase.auth().currentUser.uid)\r\n      .set({token},{merge:true})\r\n      console.log(res+\"123\")\r\n    }\r\n\r\n\r\n  \r\n    if (Platform.OS === 'android') {\r\n      Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      });\r\n    }\r\n  \r\n    return token;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}