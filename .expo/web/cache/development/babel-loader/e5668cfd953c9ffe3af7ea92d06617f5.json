{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MERTCAN\\\\Desktop\\\\receipes-app\\\\recipes-app-react-native-master\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AppContainer from \"./src/navigations/AppNavigation\";\nimport * as Notifications from 'expo-permissions';\nimport * as Permissions from 'expo-notifications';\nimport * as Constants from 'expo-constants';\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context.next = 21;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context.sent.data;\n          console.log(token);\n          _context.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App() {\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return console.log(token);\n    });\n  }, []);\n  return React.createElement(AppContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 6\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/MERTCAN/Desktop/receipes-app/recipes-app-react-native-master/App.js"],"names":["React","useEffect","AppContainer","Notifications","Permissions","Constants","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","data","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","App","then"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;AAEA,OAAOC,YAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,kBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B;AACA,OAAO,KAAKC,SAAZ,MAA2B,gBAA3B;;AAEA,SAAeC,iCAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAEMD,SAAS,CAACE,QAFhB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAG6CJ,aAAa,CAACK,mBAAd,EAH7C;;AAAA;AAAA;AAGoBC,UAAAA,cAHpB,yBAGYC,MAHZ;AAIQC,UAAAA,WAJR,GAIsBF,cAJtB;;AAAA,gBAKQA,cAAc,KAAK,SAL3B;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAM+BN,aAAa,CAACS,uBAAd,EAN/B;;AAAA;AAAA;AAMcF,UAAAA,MANd,0BAMcA,MANd;AAOMC,UAAAA,WAAW,GAAGD,MAAd;;AAPN;AAAA,gBASQC,WAAW,KAAK,SATxB;AAAA;AAAA;AAAA;;AAUME,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAVN;;AAAA;AAAA;AAAA,2CAamBV,aAAa,CAACW,qBAAd,EAbnB;;AAAA;AAaIC,UAAAA,KAbJ,iBAa0DC,IAb1D;AAcIC,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAdJ;AAAA;;AAAA;AAgBIF,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AAhBJ;AAmBE,cAAIM,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BjB,YAAAA,aAAa,CAACkB,2BAAd,CAA0C,SAA1C,EAAqD;AACnDC,cAAAA,IAAI,EAAE,SAD6C;AAEnDC,cAAAA,UAAU,EAAEpB,aAAa,CAACqB,iBAAd,CAAgCC,GAFO;AAGnDC,cAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;AAInDC,cAAAA,UAAU,EAAE;AAJuC,aAArD;AAMD;;AA1BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,eAAe,SAASC,GAAT,GAAe;AAC5B3B,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,iCAAiC,GAAGuB,IAApC,CAAyC,UAAAd,KAAK;AAAA,aAAIE,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAAJ;AAAA,KAA9C;AAGD,GAJQ,EAIN,EAJM,CAAT;AAKA,SACG,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH;AAGD","sourcesContent":["import React, {useEffect} from 'react';\nimport { StyleSheet, Text, View,Platform } from 'react-native';\nimport AppContainer from './src/navigations/AppNavigation';\nimport * as Notifications from 'expo-permissions'\nimport * as Permissions from 'expo-notifications'\nimport * as Constants from 'expo-constants'\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n}\n\nexport default function App() {\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => console.log(token));\n\n\n  }, []);\n  return (\n     <AppContainer />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}