{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MERTCAN\\\\Desktop\\\\receipes-app\\\\recipes-app-react-native-master\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport AppContainer from \"./src/navigations/AppNavigation\";\nimport * as Permissions from 'expo-permissions';\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nimport Firebase from \"./firebaseConfig\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return sendPushNotification(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return React.createElement(AppContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  });\n}\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Application Opened',\n            body: 'Application Started Succesfuly',\n            data: {\n              someData: 'goes here'\n            }\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status, res;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context3.next = 21;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context3.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context3.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context3.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context3.abrupt(\"return\");\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context3.sent.data;\n          console.log(token);\n          _context3.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (!token) {\n            _context3.next = 26;\n            break;\n          }\n\n          _context3.next = 25;\n          return _regeneratorRuntime.awrap(Firebase.firestore().collection('users').doc(Firebase.auth().current.uid).set({\n            token: token\n          }, {\n            merge: true\n          }));\n\n        case 25:\n          res = _context3.sent;\n\n        case 26:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context3.abrupt(\"return\", token);\n\n        case 28:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/MERTCAN/Desktop/receipes-app/recipes-app-react-native-master/App.js"],"names":["React","useEffect","useState","useRef","AppContainer","Permissions","Notifications","Constants","Firebase","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","sendPushNotification","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","message","to","sound","title","body","data","someData","fetch","method","headers","Accept","JSON","stringify","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","firestore","collection","doc","auth","uid","set","merge","res","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, {useEffect,useState,useRef} from 'react';\nimport { StyleSheet, Text, View,Platform,Button } from 'react-native';\nimport AppContainer from './src/navigations/AppNavigation';\nimport * as Permissions from 'expo-permissions'\nimport * as Notifications from 'expo-notifications'\nimport Constants from 'expo-constants'\nimport Firebase from './firebaseConfig'\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: false,\n  }),\n});\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  useEffect(() => {\n    registerForPushNotificationsAsync().then(token => sendPushNotification(token));\n\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      setNotification(notification);\n    });\n\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <AppContainer/>\n  );\n}\n\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.dev/notifications\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Application Opened',\n    body: 'Application Started Succesfuly',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if(token){\n    const res = await Firebase\n    .firestore()\n    .collection('users')\n    .doc(Firebase.auth().current.uid)\n    .set({token},{merge:true})\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}